{
    "name": "Sun*CI/PHP",
    "description": "Common Sun*CI steps for the PHP programming language.",
    "steps": [
        {
            "name": "Composer_Install_With_Cache",
            "description": "Install your composer packages with automated caching",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The `php` Docker image version tag\n  work_dir:\n    type: string\n    description: Path to the directory containing your composer.json file. Not needed if composer.json lives in the root\n  install_flags:\n    type: string\n    description: Use this to override the standard install flags\n  cache_file:\n    type: string\n    default: composer.lock\n    description: Absolute path to the file cache folder. This should be inline with \"composer global config cache_file --absolute\"\n  vendor_dir:\n    type: string\n    default: vendor\n    description: Relative path to the vendor folder. Relative to \"work_dir\". This should be inline with \"composer config vendor_dir\"\nimage: {{ php_image|default(parameters.php_image.default) }}\nscript:\n  {% if work_dir %}\n  - cd {{ work_dir }}\n  {% endif %}\n  - composer install {{ install_flags }}\ncache:\n  - key:\n      files:\n        - {{ cache_file|default(parameters.cache_file.default) }}\n    paths:\n      - {{ vendor_dir|default(parameters.vendor_dir.default) }}"
        },
        {
            "name": "PHP_SSH_Deployer",
            "description": "Deploy application with Deployer and SSH",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The php Docker image version tag\n  ssh_private_key:\n    type: string\n    default: $SSH_PRIVATE_KEY\n    description: SSH private key value. It is recommended to use secret value added from repository secret\n  server_ip:\n    type: string\n    default: $SERVER_IP\n    description: Server IP value. It is recommended to use secret value added from repository secret\n  environment:\n    type: string\n    default: production\n    description: Environment where to deploy the changes\n  flags:\n    type: string\n    default: ''\n    description: Flag to use for PHP deployer\n  only_branches:\n    type: array\n    default: ['master']\n    description: Limit branches when this job are created\n  except_events:\n    type: array\n    default: ['pull_request', 'tag']\n    description: Limit events when this job are not created\nimage: {{ php_image|default(parameters.php_image.default) }}\nbefore_script:\n  - composer require --dev deployer/deployer\n  - apk add openssh\n  - mkdir /root/.ssh\n  - echo {{ ssh_private_key|default(parameters.ssh_private_key.default) }} > /root/.ssh/id_rsa\n  - chmod 700 -R /root/.ssh\n  - chmod 600 -R /root/.ssh/*\n  - echo \"Host *\\n\tStrictHostKeyChecking no\\n\tIdentityFile /root/.ssh/id_rsa\\n\tAddKeysToAgent yes\\n\" >> /root/.ssh/config\n  - ssh-keyscan -H {{ server_ip|default(parameters.server_ip.default) }} >> ~/.ssh/known_hosts\nscript:\n  - php vendor/bin/dep deploy {{ environment|default(parameters.environment.default) }} -vv {{ flags|default('') }}\nonly:\n  branches:\n  {% for branch in only_branches|default(parameters.only_branches.default) -%}\n  - {{ branch }}\n  {% endfor ~%}\nexcept:\n  events:\n  {% for event in except_events|default(parameters.except_events.default) -%}\n  - {{ event }}\n  {% endfor ~%}"
        },
        {
            "name": "PHPUnit_Coverage_Postgresql",
            "description": "Run PHPUnit tests with Postgresql DB and generate code coverage information",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The `php` Docker image version tag\n  postgres_image:\n    type: string\n    default: postgres:alpine\n    description: The `postgres` Docker image version tag\n  postgres_environments:\n    type: array\n    default: ['POSTGRES_DB=testing']\n    description: The environment variables in config to postgres to add service env\n  app_environments:\n    type: array\n    default: ['APP_ENV=testing']\n    description: The environment variables in config to laravel app\n  work_dir:\n    type: string\n    description: Path to the directory containing your composer.json file. Not needed if composer.json lives in the root\n  coverage_dir:\n    type: string\n    description: Path to coverage directory\n  coverage_format:\n    type: string\n    default: ''\n    description: Format of code coverage\n  test_path:\n    type: string\n    default: ''\n    description: Path to test results file\n  junit_path:\n    default: junit.xml\n    description: Path to directory or a file to test\n    type: string\nimage: {{ php_image|default(parameters.php_image.default) }}\nservices:\n  - image: {{ postgres_image|default(parameters.postgres_image.default) }}\n    environment:\n      {% for env in postgres_environments|default(parameters.postgres_environments.default) -%}\n      - {{ env }}\n      {% endfor ~%}\nenvironment:\n{% for env in app_environments|default(parameters.app_environments.default) -%}\n  - {{ env }}\n{% endfor ~%}\nbefore_script:\n  - echo 'memory_limit=-1' >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini\n  - docker-php-ext-disable xdebug\nscript:\n  - cd {{ work_dir|default(parameters.work_dir.default) }}\n  - cp .env.example .env.testing\n  - php artisan key:generate\n  - php artisan migrate\n  - vendor/bin/phpunit -d memory_limit=-1 --coverage-html={{coverage_dir}} --coverage-{{coverage_format}} {{test_path}} --log-junit {{junit_path|default(parameters.junit_path.default)}}"
        },
        {
            "name": "PHPUnit_Coverage_Postgresql_Redis",
            "description": "Run PHPUnit tests with Postgresql DB, Redis and generate code coverage information",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The `php` Docker image version tag\n  postgres_image:\n    type: string\n    default: postgres:alpine\n    description: The `postgres` Docker image version tag\n  postgres_environments:\n    type: array\n    default: ['POSTGRES_DB=testing']\n    description: The environment variables in config to postgres to add service env\n  redis_image:\n    type: string\n    default: redis:alpine\n    description: The `redis` Docker image version tag\n  redis_environments:\n    type: array\n    default: ['']\n    description: The environment variables in config to redis to add service env\n  app_environments:\n    type: array\n    default: ['APP_ENV=testing']\n    description: The environment variables in config to laravel app\n  work_dir:\n    type: string\n    description: Path to the directory containing your composer.json file. Not needed if composer.json lives in the root\n  coverage_dir:\n    type: string\n    description: Path to coverage directory\n  coverage_format:\n    type: string\n    default: ''\n    description: Format of code coverage\n  test_path:\n    type: string\n    default: ''\n    description: Path to test results file\n  junit_path:\n    default: junit.xml\n    description: Path to directory or a file to test\n    type: string\nimage: {{ php_image|default(parameters.php_image.default) }}\nservices:\n  - image: {{ postgres_image|default(parameters.postgres_image.default) }}\n    environment:\n      {% for env in postgres_environments|default(parameters.postgres_environments.default) -%}\n      - {{ env }}\n      {% endfor ~%}\n  - image: {{ redis_image|default(parameters.redis_image.default) }}\n    environment:\n      {% for env in redis_environments|default(parameters.redis_environments.default) -%}\n      - {{ env }}\n      {% endfor ~%}\nenvironment:\n{% for env in app_environments|default(parameters.app_environments.default) -%}\n  - {{ env }}\n{% endfor ~%}\nbefore_script:\n  - echo 'memory_limit=-1' >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini\n  - docker-php-ext-disable xdebug\nscript:\n  - cd {{ work_dir|default(parameters.work_dir.default) }}\n  - cp .env.example .env.testing\n  - php artisan key:generate\n  - php artisan migrate\n  - vendor/bin/phpunit -d memory_limit=-1 --coverage-html={{coverage_dir}} --coverage-{{coverage_format}} {{test_path}} --log-junit {{junit_path|default(parameters.junit_path.default)}}"
        },
        {
            "name": "PHPUnit_Coverage_Mysql",
            "description": "Run PHPUnit tests with MySQL DB and generate code coverage information",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The `php` Docker image version tag\n  mysql_image:\n    type: string\n    default: mysql:alpine\n    description: The `mysql` Docker image version tag\n  mysql_environments:\n    type: array\n    default: ['MYSQL_DB=testing']\n    description: The environment variables in config to mysql to add service env\n  app_environments:\n    type: array\n    default: ['APP_ENV=testing']\n    description: The environment variables in config to laravel app\n  work_dir:\n    type: string\n    description: Path to the directory containing your composer.json file. Not needed if composer.json lives in the root\n  coverage_dir:\n    type: string\n    description: Path to coverage directory\n  coverage_format:\n    type: string\n    default: ''\n    description: Format of code coverage\n  test_path:\n    type: string\n    default: ''\n    description: Path to test results file\n  junit_path:\n    default: junit.xml\n    description: Path to directory or a file to test\n    type: string\nimage: {{ php_image|default(parameters.php_image.default) }}\nservices:\n  - image: {{ mysql_image|default(parameters.mysql_image.default) }}\n    environment:\n      {% for env in mysql_environments|default(parameters.mysql_environments.default) -%}\n      - {{ env }}\n      {% endfor ~%}\nenvironment:\n{% for env in app_environments|default(parameters.app_environments.default) -%}\n  - {{ env }}\n{% endfor ~%}\nbefore_script:\n  - echo 'memory_limit=-1' >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini\n  - docker-php-ext-disable xdebug\nscript:\n  - cd {{ work_dir|default(parameters.work_dir.default) }}\n  - cp .env.example .env.testing\n  - php artisan key:generate\n  - php artisan migrate\n  - vendor/bin/phpunit -d memory_limit=-1 --coverage-html={{coverage_dir}} --coverage-{{coverage_format}} {{test_path}} --log-junit {{junit_path|default(parameters.junit_path.default)}}"
        },
        {
            "name": "PHPUnit_Coverage_Mysql_Redis",
            "description": "Run PHPUnit tests with MySQL DB, Redis and generate code coverage information",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The `php` Docker image version tag\n  mysql_image:\n    type: string\n    default: mysql:alpine\n    description: The `mysql` Docker image version tag\n  mysql_environments:\n    type: array\n    default: ['MYSQL_DB=testing']\n    description: The environment variables in config to mysql to add service env\n  redis_image:\n    type: string\n    default: redis:alpine\n    description: The `redis` Docker image version tag\n  redis_environments:\n    type: array\n    default: ['']\n    description: The environment variables in config to redis to add service env\n  app_environments:\n    type: array\n    default: ['APP_ENV=testing']\n    description: The environment variables in config to laravel app\n  work_dir:\n    type: string\n    description: Path to the directory containing your composer.json file. Not needed if composer.json lives in the root\n  coverage_dir:\n    type: string\n    description: Path to coverage directory\n  coverage_format:\n    type: string\n    default: ''\n    description: Format of code coverage\n  test_path:\n    type: string\n    default: ''\n    description: Path to test results file\n  junit_path:\n    default: junit.xml\n    description: Path to directory or a file to test\n    type: string\nimage: {{ php_image|default(parameters.php_image.default) }}\nservices:\n  - image: {{ mysql_image|default(parameters.mysql_image.default) }}\n    environment:\n      {% for env in mysql_environments|default(parameters.mysql_environments.default) -%}\n      - {{ env }}\n      {% endfor ~%}\n  - image: {{ redis_image|default(parameters.redis_image.default) }}\n    environment:\n      {% for env in redis_environments|default(parameters.redis_environments.default) -%}\n      - {{ env }}\n      {% endfor ~%}\nenvironment:\n{% for env in app_environments|default(parameters.app_environments.default) -%}\n  - {{ env }}\n{% endfor ~%}\nbefore_script:\n  - echo 'memory_limit=-1' >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini\n  - docker-php-ext-disable xdebug\nscript:\n  - cd {{ work_dir|default(parameters.work_dir.default) }}\n  - cp .env.example .env.testing\n  - php artisan key:generate\n  - php artisan migrate\n  - vendor/bin/phpunit -d memory_limit=-1 --coverage-html={{coverage_dir}} --coverage-{{coverage_format}} {{test_path}} --log-junit {{junit_path|default(parameters.junit_path.default)}}"
        },
        {
            "name": "PHP_CodeSniffer",
            "description": "Check PHP Coding Standard with slevomat/coding-standard",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The php Docker image version tag\n  coding_standard_version:\n    type: string\n    default: '*'\n    description: Version for slevomat/coding-standard\n  phpcs_report:\n    type: string\n    default: checkstyle\n    description: Report flag to use for phpcs\n  phpcs_standard:\n    type: string\n    default: phpcs.xml\n    description: Standard flag to use for phpcs\nimage: {{ php_image|default(parameters.php_image.default) }}\nbefore_script:\n  - composer require --dev slevomat/coding-standard:{{ coding_standard_version|default(parameters.coding_standard_version.default) }} --ignore-platform-reqs\n  - composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true\nscript:\n  - ./vendor/bin/phpcs --report={{ phpcs_report|default(parameters.phpcs_report.default) }} --standard={{ phpcs_standard|default(parameters.phpcs_standard.default) }}\n"
        },
        {
            "name": "PHP_CodeAnalysis",
            "description": "Run PHPStan to check code analysis",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The php Docker image version tag\n  larastan_version:\n    type: string\n    default: '*'\n    description: Version for larastan package\n  memory_limit:\n    type: string\n    default: 3072M\n    description: phpstan memory limit\n  phpstan_config:\n    type: string\n    default: phpstan.neon.dist\n    description: Path to phpstan config file\nimage: {{ php_image|default(parameters.php_image.default) }}\nbefore_script:\n  - composer require --dev nunomaduro/larastan:{{ larastan_version|default(parameters.larastan_version.default) }} --ignore-platform-reqs\nscript:\n  - ./vendor/bin/phpstan analyse {% if memory_limit %} --memory-limit={{ memory_limit }} {% endif %} --configuration={{ phpstan_config|default('phpstan.neon.dist') }} --ansi"
        },
        {
            "name": "PHP_Security_Checks",
            "description": "Runs the Symfony PHP Security Checks",
            "version": "1.0.0",
            "content": "parameters:\n  php_image:\n    type: string\n    default: ghcr.io/sun-asterisk-research/php-dev:8.1-alpine3.16\n    description: The php Docker image version tag\n  checker_version:\n    type: string\n    default: v2.0.4/local-php-security-checker_2.0.4_linux_amd64\n    description: Link to executable checker file like /v2.x.x/local-php-security-checker_2.x.x_linux|darvin_amd64|arm64\n  composer_lock_file:\n    type: string\n    default: composer.lock\n    description: Location of composer lock file\n  output_format:\n    type: string\n    default: ansi\n    description: The output format (ansi by default, supported including ansi, junit, markdown, json, or yaml)\nimage: {{ php_image|default(parameters.php_image.default) }}\nbefore_script:\n  - wget -O checker \"https://github.com/fabpot/local-php-security-checker/releases/download/{{ checker_version|default(parameters.checker_version.default) }}\"\n  - chmod 775 checker\nscript:\n  - ./checker --path {{ composer_lock_file|default(parameters.composer_lock_file.default) }} --format {{ output_format|default('ansi') }}\n"
        }
    ]
}
